package main

import (
	"context"
	_ "embed"
	"errors"
	"fmt"
	"os"

	"github.com/anthropics/anthropic-sdk-go"
	"github.com/anthropics/anthropic-sdk-go/option"
	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

//go:embed prompts/LLM_AS_JUDGE.md
var promptContent string

func main() {
	s := server.NewMCPServer(
		"llm-as-judge",
		"1.0.2",
		server.WithToolCapabilities(false),
	)

	tool := mcp.NewTool("judge_response",
		mcp.WithDescription("Judge an LLM's response"),
		mcp.WithString("question",
			mcp.Required(),
			mcp.Description("the question posed to an LLM"),
		),
		mcp.WithString("response",
			mcp.Required(),
			mcp.Description("the response generated by an LLM based on the question"),
		),
		mcp.WithString("evaluation_focus",
			mcp.Description("optional - specific areas to emphasize"),
		),
	)

	s.AddTool(tool, judgeLlmResponse)

	if err := server.ServeStdio(s); err != nil {
		fmt.Printf("Server error: %v\n", err)
	}
}

func judgeLlmResponse(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	question, err := request.RequireString("question")
	if err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	response, err := request.RequireString("response")
	if err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	evaluationFocus, err := request.RequireString("evaluation_focus")
	if err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	apiKey, ok := os.LookupEnv("ANTHROPIC_API_KEY")
	if !ok {
		return nil, errors.New("could not retrieve llm api key")
	}

	client := anthropic.NewClient(
		option.WithAPIKey(apiKey),
	)

	message, err := client.Messages.New(context.TODO(), anthropic.MessageNewParams{
		MaxTokens: 1024,
		Messages: []anthropic.MessageParam{
			anthropic.NewUserMessage(anthropic.NewTextBlock(fmt.Sprintf("SYSTEM PROMPT: %s \nQUESTION: %s \nRESPONSE: %s \nEVALUATION FOCUS: %s", promptContent, question, response, evaluationFocus))),
		},
		Model: anthropic.ModelClaudeHaiku4_5,
	})
	if err != nil {
		return nil, err
	}

	var promptResult string

	for _, c := range message.Content {
		promptResult += c.Text
	}

	return mcp.NewToolResultText(promptResult), nil
}
